#!/usr/bin/env ruby
# frozen_string_literal: true

require 'test/unit'
require 'stringio'
require_relative 'answer'

# Test Day 14
class TestDay14 < Test::Unit::TestCase
  def test_sort_rocks_to_front
    assert_equal('OOOO....##', Day14.sort_rocks_to_front('OO.O.O..##'))
    assert_equal('OOO.......', Day14.sort_rocks_to_front('...OO....O'))
    assert_equal('O....#OO..', Day14.sort_rocks_to_front('.O...#O..O'))
    assert_equal('....#.....', Day14.sort_rocks_to_front('....#.....'))
  end

  GRID = [
    ['O', '.', '.', '.', '.', '#', '.', '.', '.', '.'],
    ['O', '.', 'O', 'O', '#', '.', '.', '.', '.', '#'],
    ['.', '.', '.', '.', '.', '#', '#', '.', '.', '.'],
    ['O', 'O', '.', '#', 'O', '.', '.', '.', '.', 'O'],
    ['.', 'O', '.', '.', '.', '.', '.', 'O', '#', '.'],
    ['O', '.', '#', '.', '.', 'O', '.', '#', '.', '#'],
    ['.', '.', 'O', '.', '.', '#', 'O', '.', '.', 'O'],
    ['.', '.', '.', '.', '.', '.', '.', 'O', '.', '.'],
    ['#', '.', '.', '.', '.', '#', '#', '#', '.', '.'],
    ['#', 'O', 'O', '.', '.', '#', '.', '.', '.', '.']
  ].freeze

  CYCLE_1 = [
    ['.', '.', '.', '.', '.', '#', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '#', '.', '.', '.', 'O', '#'],
    ['.', '.', '.', 'O', 'O', '#', '#', '.', '.', '.'],
    ['.', 'O', 'O', '#', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', 'O', 'O', '#', '.'],
    ['.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'],
    ['.', '.', '.', '.', 'O', '#', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', 'O', 'O', 'O', 'O'],
    ['#', '.', '.', '.', 'O', '#', '#', '#', '.', '.'],
    ['#', '.', '.', 'O', 'O', '#', '.', '.', '.', '.']
  ].freeze

  CYCLE_2 = [
    ['.', '.', '.', '.', '.', '#', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '#', '.', '.', '.', 'O', '#'],
    ['.', '.', '.', '.', '.', '#', '#', '.', '.', '.'],
    ['.', '.', 'O', '#', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', 'O', 'O', '#', '.'],
    ['.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'],
    ['.', '.', '.', '.', 'O', '#', '.', '.', '.', 'O'],
    ['.', '.', '.', '.', '.', '.', '.', 'O', 'O', 'O'],
    ['#', '.', '.', 'O', 'O', '#', '#', '#', '.', '.'],
    ['#', '.', 'O', 'O', 'O', '#', '.', '.', '.', 'O']
  ].freeze

  CYCLE_3 = [
    ['.', '.', '.', '.', '.', '#', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '#', '.', '.', '.', 'O', '#'],
    ['.', '.', '.', '.', '.', '#', '#', '.', '.', '.'],
    ['.', '.', 'O', '#', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', 'O', 'O', '#', '.'],
    ['.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'],
    ['.', '.', '.', '.', 'O', '#', '.', '.', '.', 'O'],
    ['.', '.', '.', '.', '.', '.', '.', 'O', 'O', 'O'],
    ['#', '.', '.', '.', 'O', '#', '#', '#', '.', 'O'],
    ['#', '.', 'O', 'O', 'O', '#', '.', '.', '.', 'O']
  ].freeze

  def test_cycle
    assert_equal(CYCLE_1, Day14.cycle(GRID))
    assert_equal(CYCLE_2, Day14.cycle(CYCLE_1))
    assert_equal(CYCLE_3, Day14.cycle(CYCLE_2))
  end

  def test_part1
    Day14::SAMPLE ? assert_equal(136, Day14.part1) : assert_equal(109_833, Day14.part1)
  end

  # 101_046 too high
  # 101_046 too high
  def test_part2
    omit
    Day14::SAMPLE ? assert_equal(87, Day14.part2) : assert_equal(nil, Day14.part2)
  end
end
